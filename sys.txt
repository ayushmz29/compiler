1. lex program to identify keyword and identifier


%{
#include<stdio.h>
%}
%%
auto|count|if|else|for|while {printf("keyword");}
(_|[a-z])([a-z]|[0-9]|_)* {printf("identifier");}
%%
int main(){
printf("enter keyword and identifier");
yylex();
return 0;
}

2. lex program to identify the vowel and consonant


%{
#include<stdio.h>
%}
vowel [aeiouAEIOU]
%%
{vowel} {printf("vowel");}
[a-z]|[A-Z] {printf("consonant");}
%%
int main(){
printf("enter vowel and consonant");
yylex();
return 0;
}

3. lex program to identify keyword and convert to uppercase


%{
#include<stdio.h>
int i;
%}
key if|else|while|for|return
%%
{key} {for(i=0;i<yyleng;i++){
	printf("%c",toupper(yytext[i]));
	}
}
%%
int main(){
printf("enter keyword");
yylex();
return 0;
}


4. yacc program to convert binary to decimal

yacc program :
%{
#include<stdio.h>
#include<stdlib.h>
int yyerror(char *s);
int yylex();
%}
%token ONE ZERO
%%
N : L {printf("\n %d",$$);};
L : L B {$$=$1*2+$2;}
| B {$$=$1;};
B : ZERO {$$=$1;}
| ONE {$$=$1;};
%%
int main(){
printf("enter binary value");
yyparse();
return 0;
}
int yyerror(char *s){
fprintf(stdout,"\n%s",s);
return 0;
}

lex program:
%{
#include"y.tab.h"
extern int yylval;
%}
%%
0 {yylval=0; return ZERO;}
1 {yylval=1; return ONE;}
[ \t] {;}
\n {return 0;}
. {return yytext[0];}
%%


yacc program to convert prefix to postfix

yacc program:
%{
#include<stdio.h>
#include<stdlib.h>
int yyerror(char *s);
int yylex();
%}
%token num
%%
E : E '+' T {printf("+");}
| T;
T : T '*' F {printf("*");}
| F;
F : num {printf("%d",yylval);};
%%
int main(){
printf("enter expression");
yyparse();
printf("valid expression");
return 0;
}
int yyerror(char *s){
printf("invalid expression");
return 0;
}

lex program:
%{
#include"y.tab.h"
extern int yylval;
%}
%%
[0-9] {yylval=atoi(yytext); return num;}
[ \t] {;}
\n {return 0;}
. {return yytext[0];}
%%


6. yacc pragram to identiffy a valid arthematic expression

yacc program :
%{
#include<stdio.h>
#include<stdlib.h>
int yylex();
int yyerror(char * s);
%}

%token num
%start S
%left '+' '-'
%left '*' '/'
%right uminus

%%
S : E {printf("\n %d",$$);}
;
E : E '+' E {$$ = $1 + $3;}
| E '-' E {$$ = $1 - $3;}
| E '*' E {$$ = $1 * $3;}
| E '/' E {$$ = $1 / $3;}
| '(' E ')' {$$ = $2;}
| '-' E %prec uminus {$$ = -$2;}
| num {$$ = $1;}
;
%%

int main(){
	printf("\n Enter the expression : ");
	yyparse();
	printf("\n Expression is valid");
	return 0;
}
int yyerror(char *s){
	printf("\n Expression is invalid");
}


lex program:
%{
	#include "y.tab.h"
	extern int yylval;
%}

%%
[0-9]+ {yylval = atoi(yytext);  return num;}
[ \t]+ ;
\n {return 0;}
. {return yytext[0];}
%%


7. lex programe to count no. of keyword and identifier


lex program:
%{
#include<stdio.h>
int c=0,ct=0;
%}
%%
if|for|else|int|float {printf("%d",c++);}
(_|[a-z])([a-z]|[0-9]|_)* {printf("%d",ct++);}
%%
int main(){
printf("enter keyword or identifier \n");
yylex();
return 0;
}

8. lex program fiel copy one to another

lex programmer:
%{
#include<stdio.h>
#include<string.h>
%}
%%
. {fprintf(yyout,"%s",yytext);}
%%
int main(){
yyin=fopen("demo.txt","r");
yyout=fopen("demo1.txt","w");
yylex();
return 0;
}


9. lex program count no. of letter words and lines

lex program:
%{
#include<stdio.h>
#include<stdlib.h>
int nlines,nwords,nchars;
%}
%%
\n {nchars++; nlines++;}
[^\n\t]+ {nwords++; nchars=nchars+yyleng;}
%%
int yywrap(void){
return 1;
}
int main(int argc, char *argv[]){
yyin=fopen(argv[1],"r");
yylex();
printf("lines:%d, words:%d, chars:%d",nlines,nwords,nchars);
return 0;
}


10. yacc program to a valid arthmetic expression that uses operators +,-,*,/

yacc program:
%{
#include<stdio.h>
#include<stdlib.h>
int yylex();
int yyerror(char * s);
%}

%token NUMBER ID
%left '+' '-'
%left '*' '/'
%%
E : T {printf("\n %d",$$); return 0;};
T : T '+' T {$$ = $1 + $3;}
| T '-' T {$$ = $1 - $3;}
| T '*' T {$$ = $1 * $3;}
| T '/' T {$$ = $1 / $3;}
| '-' ID {$$=-$2;}
| '-' NUMBER {$$=-$2;}
| '(' T ')' {$$ = $2;}
| NUMBER {$$=$1;}
| ID {$$ = $1;};
%%

int main(){
	printf("\n Enter the expression : ");
	yyparse();
	printf("\n Expression is valid");
	return 0;
}
int yyerror(char *s){
	printf("\n Expression is invalid");
}

lex program:
%{
	#include "y.tab.h"
	extern int yylval;
%}

%%
[0-9]+ {yylval = atoi(yytext);  return NUMBER;}
([a-z]|[A-Z])+ {return ID;}
[ \t]+ ;
\n {return 0;}
. {return yytext[0];}
%%

11 . yacc pragram to recognise generate the grammer S->AA , a->aA|b

yacc program:
%{
#include<stdio.h>
#include<stdlib.h>
int yylex();
int yyerror(char * s);
%}
%%
S : A A;
A : 'a' A
| 'b'
%%

int main(){
	printf("\n Enter the expression : ");
	yyparse();
	printf("\n Expression is valid");
	return 0;
}
int yyerror(char *s){
	printf("\n Expression is invalid");
	return 0;
}


lex program:
%{
	#include "y.tab.h"
	extern int yylval;
%}
%%
[ \t]+ ;
\n {return 0;}
. {return yytext[0];}
%%










